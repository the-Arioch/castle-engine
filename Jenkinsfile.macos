/* -*- mode: groovy -*-
  Configure how to run our job in Jenkins.
  This runs on macOS, and can build for iOS and macOS.
  See https://castle-engine.io/cloud_builds_jenkins .
*/

library 'cag-shared-jenkins-library'

pipeline {
  options {
    /* While concurrent builds of CGE work OK,
       they stuck Jenkins much with too many long-running builds.
       Better to wait for previous build to finish. */
    disableConcurrentBuilds()
  }
  agent {
    label 'mac-cge-builder'
  }
  environment {
    /* Used by CGE build tool ("castle-engine").
       Define env based on another env variable.
       According to https://github.com/jenkinsci/pipeline-model-definition-plugin/pull/110
       this should be supported. */
    CASTLE_ENGINE_PATH = "${WORKSPACE}"
    CGE_INSTALL_PREFIX = "${CASTLE_ENGINE_PATH}/jenkins-installed/"
    PATH = "${PATH}:${CGE_INSTALL_PREFIX}/bin/:${WORKSPACE}/pasdoc/bin/"
    /* By default old Lazarus wanted to build with Carbon, which is 32-bit only and deprecated by Apple.
       No longer necessary with Lazarus 2.2.2. */
    // CASTLE_LAZBUILD_OPTIONS = "--widgetset=cocoa"
  }
  stages {
    stage('Info') {
      steps {
        // check versions (and availability) of our requirements early
        sh 'fpc -iV'
        sh 'lazbuild --version'
        sh 'make --version'
      }
    }
    stage('Cleanup') {
      steps {
        sh "repository_cleanup . --remove-unversioned"
      }
    }
    stage('Build Tools') {
      steps {
        sh 'rm -Rf ${CGE_INSTALL_PREFIX}'
        sh 'mkdir -p ${CGE_INSTALL_PREFIX}'
        sh 'make clean tools install PREFIX=${CGE_INSTALL_PREFIX}'
      }
    }
    /*
    // TODO: Commented-out temporarily, just for quick testing
    stage('Build Examples') {
      steps {
        sh 'make clean examples'
      }
    }
    */
    stage('Build And Run Auto-Tests') {
      steps {
        sh 'make tests'
      }
    }
    /*
    // TODO: ignore fpmake test, we don't have fpmake "opengl" package ok after installing on macOS using fpcupdeluxe?
    stage('Build Using FpMake') {
      steps {
        sh 'make clean test-fpmake'
      }
    }
    */
    stage('Build Lazarus Packages') {
      steps {
        sh 'lazbuild $CASTLE_LAZBUILD_OPTIONS src/vampyre_imaginglib/src/Packages/VampyreImagingPackage.lpk'
        sh 'lazbuild $CASTLE_LAZBUILD_OPTIONS src/vampyre_imaginglib/src/Packages/VampyreImagingPackageExt.lpk'
        sh 'lazbuild $CASTLE_LAZBUILD_OPTIONS packages/castle_base.lpk'
        sh 'lazbuild $CASTLE_LAZBUILD_OPTIONS packages/castle_window.lpk'
        sh 'lazbuild $CASTLE_LAZBUILD_OPTIONS packages/castle_components.lpk'
        sh 'lazbuild $CASTLE_LAZBUILD_OPTIONS packages/alternative_castle_window_based_on_lcl.lpk'
      }
    }
    stage('Build Editor') {
      steps {
        dir ('tools/castle-editor/') {
          sh 'castle-engine package'
        }
      }
    }
    stage('Get PasDoc') {
      steps {
        /* remove older PasDoc versions, so that later "pasdoc-*-darwin-x86_64.zip"
           expands "pasdoc-*-darwin-x86_64.zip" only to one file.
           This matters when PasDoc version change, e.g. from 0.15.0 to 0.16.0. */
        sh 'rm -f pasdoc-*-darwin-x86_64.zip'
        /* Use https://plugins.jenkins.io/copyartifact/ plugin to copy last pasdoc build into this build. */
        copyArtifacts(projectName: 'pasdoc_organization/pasdoc/master', filter: 'pasdoc-*-darwin-x86_64.zip')
        sh 'unzip pasdoc-*-darwin-x86_64.zip'
      }
    }
    stage('Pack Release') {
      steps {
        sh 'rm -f castle-engine*.zip' /* remove previous artifacts */
        sh './tools/internal/pack_release/pack_release.sh darwin x86_64'
      }
    }
  }
  post {
    success {
      archiveArtifacts artifacts: 'castle-engine*.zip'
    }
    regression {
      mail to: 'michalis@castle-engine.io',
        subject: "[jenkins] Build started failing: ${currentBuild.fullDisplayName}",
        body: "See the build details on ${env.BUILD_URL}"
    }
    failure {
      mail to: 'michalis@castle-engine.io',
        subject: "[jenkins] Build failed: ${currentBuild.fullDisplayName}",
        body: "See the build details on ${env.BUILD_URL}"
    }
    fixed {
      mail to: 'michalis@castle-engine.io',
        subject: "[jenkins] Build is again successful: ${currentBuild.fullDisplayName}",
        body: "See the build details on ${env.BUILD_URL}"
    }
  }
}
