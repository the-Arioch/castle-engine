{ -*- buffer-read-only: t -*-

  Copyright 2015-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  public
    procedure CreateNode; override;
    class function ClassX3DType: string; override;

    strict private FFdData: TMFNode;
    { X3D field "data". } { }
    public property FdData: TMFNode read FFdData;
    { Set X3D field "data". } { }
    procedure SetData(const Value: array of TAbstractNode);

    strict private FFdSummary: TMFString;
    { X3D field "summary". } { }
    public property FdSummary: TMFString read FFdSummary;
    { Set X3D field "summary". } { }
    procedure SetSummary(const Value: array of string); overload;
    { Set X3D field "summary". } { }
    procedure SetSummary(const Value: TCastleStringList); overload;

    strict private FFdUrl: TMFString;
    { X3D field "url". } { }
    public property FdUrl: TMFString read FFdUrl;
    { Set X3D field "url". } { }
    procedure SetUrl(const Value: array of string); overload;
    { Set X3D field "url". } { }
    procedure SetUrl(const Value: TCastleStringList); overload;

{$endif read_interface}

{$ifdef read_implementation}

{ TGeoMetadataNode ----------------------------------------------- }

procedure TGeoMetadataNode.SetData(const Value: array of TAbstractNode);
var
  L: Integer;
  A: array of TX3DNode;
begin
  L := High(Value) + 1;
  SetLength(A, L);
  if L > 0 then
    Move(Value[0], A[0], L * SizeOf(TAbstractNode));
  FdData.Send(A);
end;

procedure TGeoMetadataNode.SetSummary(const Value: array of string);
begin
  FdSummary.Send(Value);
end;

procedure TGeoMetadataNode.SetSummary(const Value: TCastleStringList);
begin
  FdSummary.Send(Value);
end;

procedure TGeoMetadataNode.SetUrl(const Value: array of string);
begin
  FdUrl.Send(Value);
end;

procedure TGeoMetadataNode.SetUrl(const Value: TCastleStringList);
begin
  FdUrl.Send(Value);
end;

class function TGeoMetadataNode.ClassX3DType: String;
begin
  Result := 'GeoMetadata';
end;

procedure TGeoMetadataNode.CreateNode;
begin
  inherited;

  FFdData := TMFNode.Create(Self, True, 'data', [TAbstractNode]);
   FdData.ChangeAlways := chNone;
  AddField(FFdData);

  FFdSummary := TMFString.Create(Self, True, 'summary', []);
   FdSummary.ChangeAlways := chNone;
  AddField(FFdSummary);

  FFdUrl := TMFString.Create(Self, True, 'url', []);
   FdUrl.ChangeAlways := chNone;
  AddField(FFdUrl);
end;

{$endif read_implementation}
