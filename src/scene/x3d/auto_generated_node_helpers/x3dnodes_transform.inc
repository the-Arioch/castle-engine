{ -*- buffer-read-only: t -*-

  Copyright 2015-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetCenter: TVector3;
    procedure SetCenter(const Value: TVector3);
    function GetRotation: TVector4;
    procedure SetRotation(const Value: TVector4);
    function GetScale: TVector3;
    procedure SetScale(const Value: TVector3);
    function GetScaleOrientation: TVector4;
    procedure SetScaleOrientation(const Value: TVector4);
    function GetTranslation: TVector3;
    procedure SetTranslation(const Value: TVector3);
  public
    { Center point around which the @link(Rotation) and @link(Scale) is performed. }
    property Center: TVector3 read GetCenter write SetCenter;
    { Rotation in 3D, around a specified axis. Rotation is expressed as a 4D vector, in which the first 3 components specify the rotation axis (does not need to be normalized, but must be non-zero) and the last component is the rotation angle @italic(in radians). Rotation is done around @link(Center). }
    property Rotation: TVector4 read GetRotation write SetRotation;
    { Scale in 3D. Scaling is done around @link(Center) and with orientation given by @link(ScaleOrientation). }
    property Scale: TVector3 read GetScale write SetScale;
    { Orientation in which 3D @link(Scale) is performed. }
    property ScaleOrientation: TVector4 read GetScaleOrientation write SetScaleOrientation;
    { Translation (move) the children nodes. }
    property Translation: TVector3 read GetTranslation write SetTranslation;

{$endif read_interface}

{$ifdef read_implementation}

{ TTransformNode ----------------------------------------------- }

function TTransformNode.GetCenter: TVector3;
begin
  Result := FdCenter.Value;
end;

procedure TTransformNode.SetCenter(const Value: TVector3);
begin
  FdCenter.Send(Value);
end;

function TTransformNode.GetRotation: TVector4;
begin
  Result := FdRotation.Value;
end;

procedure TTransformNode.SetRotation(const Value: TVector4);
begin
  FdRotation.Send(Value);
end;

function TTransformNode.GetScale: TVector3;
begin
  Result := FdScale.Value;
end;

procedure TTransformNode.SetScale(const Value: TVector3);
begin
  FdScale.Send(Value);
end;

function TTransformNode.GetScaleOrientation: TVector4;
begin
  Result := FdScaleOrientation.Value;
end;

procedure TTransformNode.SetScaleOrientation(const Value: TVector4);
begin
  FdScaleOrientation.Send(Value);
end;

function TTransformNode.GetTranslation: TVector3;
begin
  Result := FdTranslation.Value;
end;

procedure TTransformNode.SetTranslation(const Value: TVector3);
begin
  FdTranslation.Send(Value);
end;

{$endif read_implementation}
