{ -*- buffer-read-only: t -*-

  Copyright 2015-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetGeoOrigin: TGeoOriginNode;
    procedure SetGeoOrigin(const Value: TGeoOriginNode);
  public
    procedure CreateNode; override;
    class function ClassX3DType: string; override;

    strict private FFdKeyValue: TMFVec3d;
    { X3D field "keyValue". } { }
    public property FdKeyValue: TMFVec3d read FFdKeyValue;
    { Set X3D field "keyValue". } { }
    procedure SetKeyValue(const Value: array of TVector3Double); overload;
    { Set X3D field "keyValue". } { }
    procedure SetKeyValue(const Value: TVector3DoubleList); overload;

    strict private FEventGeovalue_changed: TSFVec3dEvent;
    { X3D out event "geovalue_changed". } { }
    public property EventGeovalue_changed: TSFVec3dEvent read FEventGeovalue_changed;

    strict private FEventValue_changed: TSFVec3fEvent;
    { X3D out event "value_changed". } { }
    public property EventValue_changed: TSFVec3fEvent read FEventValue_changed;

    strict private FFdGeoOrigin: TSFNode;
    { X3D field "geoOrigin". } { }
    public property FdGeoOrigin: TSFNode read FFdGeoOrigin;
    { X3D field "geoOrigin". } { }
    property GeoOrigin: TGeoOriginNode read GetGeoOrigin write SetGeoOrigin;

    strict private FFdGeoSystem: TMFString;
    { X3D field "geoSystem". } { }
    public property FdGeoSystem: TMFString read FFdGeoSystem;
    { Set X3D field "geoSystem". } { }
    procedure SetGeoSystem(const Value: array of string); overload;
    { Set X3D field "geoSystem". } { }
    procedure SetGeoSystem(const Value: TCastleStringList); overload;

{$endif read_interface}

{$ifdef read_implementation}

{ TGeoPositionInterpolatorNode ----------------------------------------------- }

procedure TGeoPositionInterpolatorNode.SetKeyValue(const Value: array of TVector3Double);
begin
  FdKeyValue.Send(Value);
end;

procedure TGeoPositionInterpolatorNode.SetKeyValue(const Value: TVector3DoubleList);
begin
  FdKeyValue.Send(Value);
end;

function TGeoPositionInterpolatorNode.GetGeoOrigin: TGeoOriginNode;
begin
  if FdGeoOrigin.Value is TGeoOriginNode then
    Result := TGeoOriginNode(FdGeoOrigin.Value)
  else
    Result := nil;
end;

procedure TGeoPositionInterpolatorNode.SetGeoOrigin(const Value: TGeoOriginNode);
begin
  FdGeoOrigin.Send(Value);
end;

procedure TGeoPositionInterpolatorNode.SetGeoSystem(const Value: array of string);
begin
  FdGeoSystem.Send(Value);
end;

procedure TGeoPositionInterpolatorNode.SetGeoSystem(const Value: TCastleStringList);
begin
  FdGeoSystem.Send(Value);
end;

class function TGeoPositionInterpolatorNode.ClassX3DType: String;
begin
  Result := 'GeoPositionInterpolator';
end;

procedure TGeoPositionInterpolatorNode.CreateNode;
begin
  inherited;

  FFdKeyValue := TMFVec3d.Create(Self, True, 'keyValue', []);
   FdKeyValue.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdKeyValue);

  FEventGeovalue_changed := TSFVec3dEvent.Create(Self, 'geovalue_changed', false);
  AddEvent(FEventGeovalue_changed);

  FEventValue_changed := TSFVec3fEvent.Create(Self, 'value_changed', false);
  AddEvent(FEventValue_changed);

  FFdGeoOrigin := TSFNode.Create(Self, False, 'geoOrigin', [TGeoOriginNode]);
   FdGeoOrigin.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdGeoOrigin);

  FFdGeoSystem := TMFString.Create(Self, False, 'geoSystem', ['GD','WE']);
   FdGeoSystem.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdGeoSystem);
end;

{$endif read_implementation}
