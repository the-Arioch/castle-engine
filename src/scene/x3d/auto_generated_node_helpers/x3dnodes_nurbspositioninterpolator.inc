{ -*- buffer-read-only: t -*-

  Copyright 2015-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetControlPoint: TAbstractCoordinateNode;
    procedure SetControlPoint(const Value: TAbstractCoordinateNode);
    function GetOrder: Integer;
    procedure SetOrder(const Value: Integer);
  public
    procedure CreateNode; override;
    class function ClassX3DType: string; override;

    strict private FEventSet_fraction: TSFFloatEvent;
    { X3D in event "set_fraction". } { }
    public property EventSet_fraction: TSFFloatEvent read FEventSet_fraction;

    strict private FFdControlPoint: TSFNode;
    { X3D field "controlPoint". } { }
    public property FdControlPoint: TSFNode read FFdControlPoint;
    { X3D field "controlPoint". } { }
    property ControlPoint: TAbstractCoordinateNode read GetControlPoint write SetControlPoint;

    strict private FFdKnot: TMFDouble;
    { X3D field "knot". } { }
    public property FdKnot: TMFDouble read FFdKnot;
    { Set X3D field "knot". } { }
    procedure SetKnot(const Value: array of Double); overload;
    { Set X3D field "knot". } { }
    procedure SetKnot(const Value: TDoubleList); overload;

    strict private FFdOrder: TSFInt32;
    { X3D field "order". } { }
    public property FdOrder: TSFInt32 read FFdOrder;
    { X3D field "order". } { }
    property Order: Integer read GetOrder write SetOrder;

    strict private FFdWeight: TMFDouble;
    { X3D field "weight". } { }
    public property FdWeight: TMFDouble read FFdWeight;
    { Set X3D field "weight". } { }
    procedure SetWeight(const Value: array of Double); overload;
    { Set X3D field "weight". } { }
    procedure SetWeight(const Value: TDoubleList); overload;

    strict private FEventValue_changed: TSFVec3fEvent;
    { X3D out event "value_changed". } { }
    public property EventValue_changed: TSFVec3fEvent read FEventValue_changed;

{$endif read_interface}

{$ifdef read_implementation}

{ TNurbsPositionInterpolatorNode ----------------------------------------------- }

function TNurbsPositionInterpolatorNode.GetControlPoint: TAbstractCoordinateNode;
begin
  if FdControlPoint.Value is TAbstractCoordinateNode then
    Result := TAbstractCoordinateNode(FdControlPoint.Value)
  else
    Result := nil;
end;

procedure TNurbsPositionInterpolatorNode.SetControlPoint(const Value: TAbstractCoordinateNode);
begin
  FdControlPoint.Send(Value);
end;

procedure TNurbsPositionInterpolatorNode.SetKnot(const Value: array of Double);
begin
  FdKnot.Send(Value);
end;

procedure TNurbsPositionInterpolatorNode.SetKnot(const Value: TDoubleList);
begin
  FdKnot.Send(Value);
end;

function TNurbsPositionInterpolatorNode.GetOrder: Integer;
begin
  Result := FdOrder.Value;
end;

procedure TNurbsPositionInterpolatorNode.SetOrder(const Value: Integer);
begin
  FdOrder.Send(Value);
end;

procedure TNurbsPositionInterpolatorNode.SetWeight(const Value: array of Double);
begin
  FdWeight.Send(Value);
end;

procedure TNurbsPositionInterpolatorNode.SetWeight(const Value: TDoubleList);
begin
  FdWeight.Send(Value);
end;

class function TNurbsPositionInterpolatorNode.ClassX3DType: String;
begin
  Result := 'NurbsPositionInterpolator';
end;

procedure TNurbsPositionInterpolatorNode.CreateNode;
begin
  inherited;

  FEventSet_fraction := TSFFloatEvent.Create(Self, 'set_fraction', true);
  AddEvent(FEventSet_fraction);

  FFdControlPoint := TSFNode.Create(Self, True, 'controlPoint', [TAbstractCoordinateNode]);
   FdControlPoint.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdControlPoint);

  FFdKnot := TMFDouble.Create(Self, True, 'knot', []);
   FdKnot.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdKnot);

  FFdOrder := TSFInt32.Create(Self, True, 'order', 3);
   FdOrder.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdOrder);

  FFdWeight := TMFDouble.Create(Self, True, 'weight', []);
   FdWeight.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdWeight);

  FEventValue_changed := TSFVec3fEvent.Create(Self, 'value_changed', false);
  AddEvent(FEventValue_changed);
end;

{$endif read_implementation}
