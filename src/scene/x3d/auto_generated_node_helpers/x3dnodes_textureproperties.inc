{ -*- buffer-read-only: t -*-

  Copyright 2015-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetAnisotropicDegree: Single;
    procedure SetAnisotropicDegree(const Value: Single);
    function GetBorderColor: TCastleColor;
    procedure SetBorderColor(const Value: TCastleColor);
    function GetBorderWidth: Integer;
    procedure SetBorderWidth(const Value: Integer);
    function GetBoundaryModeS: TBoundaryMode;
    procedure SetBoundaryModeS(const Value: TBoundaryMode);
    function GetBoundaryModeT: TBoundaryMode;
    procedure SetBoundaryModeT(const Value: TBoundaryMode);
    function GetBoundaryModeR: TBoundaryMode;
    procedure SetBoundaryModeR(const Value: TBoundaryMode);
    function GetTextureCompression: String;
    procedure SetTextureCompression(const Value: String);
    function GetTexturePriority: Single;
    procedure SetTexturePriority(const Value: Single);
    function GetGenerateMipMaps: Boolean;
    procedure SetGenerateMipMaps(const Value: Boolean);
    function GetGuiTexture: Boolean;
    procedure SetGuiTexture(const Value: Boolean);
  public
    procedure CreateNode; override;
    class function ClassX3DType: string; override;

    strict private FFdAnisotropicDegree: TSFFloat;
    { X3D field "anisotropicDegree". } { }
    public property FdAnisotropicDegree: TSFFloat read FFdAnisotropicDegree;
    { X3D field "anisotropicDegree". } { }
    property AnisotropicDegree: Single read GetAnisotropicDegree write SetAnisotropicDegree;

    strict private FFdBorderColor: TSFColorRGBA;
    { X3D field "borderColor". } { }
    public property FdBorderColor: TSFColorRGBA read FFdBorderColor;
    { X3D field "borderColor". } { }
    property BorderColor: TCastleColor read GetBorderColor write SetBorderColor;

    strict private FFdBorderWidth: TSFInt32;
    { X3D field "borderWidth". } { }
    public property FdBorderWidth: TSFInt32 read FFdBorderWidth;
    { X3D field "borderWidth". } { }
    property BorderWidth: Integer read GetBorderWidth write SetBorderWidth;

    strict private FFdBoundaryModeS: TSFStringEnum;
    { X3D field "boundaryModeS". } { }
    public property FdBoundaryModeS: TSFStringEnum read FFdBoundaryModeS;
    { X3D field "boundaryModeS". } { }
    property BoundaryModeS: TBoundaryMode read GetBoundaryModeS write SetBoundaryModeS;

    strict private FFdBoundaryModeT: TSFStringEnum;
    { X3D field "boundaryModeT". } { }
    public property FdBoundaryModeT: TSFStringEnum read FFdBoundaryModeT;
    { X3D field "boundaryModeT". } { }
    property BoundaryModeT: TBoundaryMode read GetBoundaryModeT write SetBoundaryModeT;

    strict private FFdBoundaryModeR: TSFStringEnum;
    { X3D field "boundaryModeR". } { }
    public property FdBoundaryModeR: TSFStringEnum read FFdBoundaryModeR;
    { X3D field "boundaryModeR". } { }
    property BoundaryModeR: TBoundaryMode read GetBoundaryModeR write SetBoundaryModeR;

    strict private FFdMagnificationFilter: TSFString;
    { X3D field "magnificationFilter". } { }
    public property FdMagnificationFilter: TSFString read FFdMagnificationFilter;

    strict private FFdMinificationFilter: TSFString;
    { X3D field "minificationFilter". } { }
    public property FdMinificationFilter: TSFString read FFdMinificationFilter;

    strict private FFdTextureCompression: TSFString;
    { X3D field "textureCompression". } { }
    public property FdTextureCompression: TSFString read FFdTextureCompression;
    { X3D field "textureCompression". } { }
    property TextureCompression: String read GetTextureCompression write SetTextureCompression;

    strict private FFdTexturePriority: TSFFloat;
    { X3D field "texturePriority". } { }
    public property FdTexturePriority: TSFFloat read FFdTexturePriority;
    { X3D field "texturePriority". } { }
    property TexturePriority: Single read GetTexturePriority write SetTexturePriority;

    strict private FFdGenerateMipMaps: TSFBool;
    { X3D field "generateMipMaps". } { }
    public property FdGenerateMipMaps: TSFBool read FFdGenerateMipMaps;
    { X3D field "generateMipMaps". } { }
    property GenerateMipMaps: Boolean read GetGenerateMipMaps write SetGenerateMipMaps;

    strict private FFdGuiTexture: TSFBool;
    { X3D field "guiTexture". } { }
    public property FdGuiTexture: TSFBool read FFdGuiTexture;
    { X3D field "guiTexture". } { }
    property GuiTexture: Boolean read GetGuiTexture write SetGuiTexture;

{$endif read_interface}

{$ifdef read_implementation}

{ TTexturePropertiesNode ----------------------------------------------- }

function TTexturePropertiesNode.GetAnisotropicDegree: Single;
begin
  Result := FdAnisotropicDegree.Value;
end;

procedure TTexturePropertiesNode.SetAnisotropicDegree(const Value: Single);
begin
  FdAnisotropicDegree.Send(Value);
end;

function TTexturePropertiesNode.GetBorderColor: TCastleColor;
begin
  Result := FdBorderColor.Value;
end;

procedure TTexturePropertiesNode.SetBorderColor(const Value: TCastleColor);
begin
  FdBorderColor.Send(Value);
end;

function TTexturePropertiesNode.GetBorderWidth: Integer;
begin
  Result := FdBorderWidth.Value;
end;

procedure TTexturePropertiesNode.SetBorderWidth(const Value: Integer);
begin
  FdBorderWidth.Send(Value);
end;

function TTexturePropertiesNode.GetBoundaryModeS: TBoundaryMode;
begin
  Result := TBoundaryMode(FdBoundaryModeS.EnumValue);
end;

procedure TTexturePropertiesNode.SetBoundaryModeS(const Value: TBoundaryMode);
begin
  FdBoundaryModeS.SendEnumValue(Ord(Value));
end;

function TTexturePropertiesNode.GetBoundaryModeT: TBoundaryMode;
begin
  Result := TBoundaryMode(FdBoundaryModeT.EnumValue);
end;

procedure TTexturePropertiesNode.SetBoundaryModeT(const Value: TBoundaryMode);
begin
  FdBoundaryModeT.SendEnumValue(Ord(Value));
end;

function TTexturePropertiesNode.GetBoundaryModeR: TBoundaryMode;
begin
  Result := TBoundaryMode(FdBoundaryModeR.EnumValue);
end;

procedure TTexturePropertiesNode.SetBoundaryModeR(const Value: TBoundaryMode);
begin
  FdBoundaryModeR.SendEnumValue(Ord(Value));
end;

function TTexturePropertiesNode.GetTextureCompression: String;
begin
  Result := FdTextureCompression.Value;
end;

procedure TTexturePropertiesNode.SetTextureCompression(const Value: String);
begin
  FdTextureCompression.Send(Value);
end;

function TTexturePropertiesNode.GetTexturePriority: Single;
begin
  Result := FdTexturePriority.Value;
end;

procedure TTexturePropertiesNode.SetTexturePriority(const Value: Single);
begin
  FdTexturePriority.Send(Value);
end;

function TTexturePropertiesNode.GetGenerateMipMaps: Boolean;
begin
  Result := FdGenerateMipMaps.Value;
end;

procedure TTexturePropertiesNode.SetGenerateMipMaps(const Value: Boolean);
begin
  FdGenerateMipMaps.Send(Value);
end;

function TTexturePropertiesNode.GetGuiTexture: Boolean;
begin
  Result := FdGuiTexture.Value;
end;

procedure TTexturePropertiesNode.SetGuiTexture(const Value: Boolean);
begin
  FdGuiTexture.Send(Value);
end;

class function TTexturePropertiesNode.ClassX3DType: String;
begin
  Result := 'TextureProperties';
end;

procedure TTexturePropertiesNode.CreateNode;
begin
  inherited;

  FFdAnisotropicDegree := TSFFloat.Create(Self, True, 'anisotropicDegree', 1.0);
   FdAnisotropicDegree.ChangeAlways := chTexturePropertiesNode;
  AddField(FFdAnisotropicDegree);

  FFdBorderColor := TSFColorRGBA.Create(Self, True, 'borderColor', Vector4(0, 0, 0, 0));
   FdBorderColor.ChangeAlways := chTexturePropertiesNode;
  AddField(FFdBorderColor);

  FFdBorderWidth := TSFInt32.Create(Self, True, 'borderWidth', 0);
   FdBorderWidth.ChangeAlways := chTexturePropertiesNode;
  AddField(FFdBorderWidth);

  FFdBoundaryModeS := TSFStringEnum.Create(Self, True, 'boundaryModeS', BoundaryModeNames, Ord(bmRepeat));
   FdBoundaryModeS.ChangeAlways := chTexturePropertiesNode;
  AddField(FFdBoundaryModeS);

  FFdBoundaryModeT := TSFStringEnum.Create(Self, True, 'boundaryModeT', BoundaryModeNames, Ord(bmRepeat));
   FdBoundaryModeT.ChangeAlways := chTexturePropertiesNode;
  AddField(FFdBoundaryModeT);

  FFdBoundaryModeR := TSFStringEnum.Create(Self, True, 'boundaryModeR', BoundaryModeNames, Ord(bmRepeat));
   FdBoundaryModeR.ChangeAlways := chTexturePropertiesNode;
  AddField(FFdBoundaryModeR);

  FFdMagnificationFilter := TSFString.Create(Self, True, 'magnificationFilter', 'DEFAULT');
   FdMagnificationFilter.ChangeAlways := chTexturePropertiesNode;
  AddField(FFdMagnificationFilter);

  FFdMinificationFilter := TSFString.Create(Self, True, 'minificationFilter', 'DEFAULT');
   FdMinificationFilter.ChangeAlways := chTexturePropertiesNode;
  AddField(FFdMinificationFilter);

  FFdTextureCompression := TSFString.Create(Self, True, 'textureCompression', 'FASTEST');
   FdTextureCompression.ChangeAlways := chTexturePropertiesNode;
  AddField(FFdTextureCompression);

  FFdTexturePriority := TSFFloat.Create(Self, True, 'texturePriority', 0);
   FdTexturePriority.ChangeAlways := chTexturePropertiesNode;
  AddField(FFdTexturePriority);

  FFdGenerateMipMaps := TSFBool.Create(Self, False, 'generateMipMaps', false);
   FdGenerateMipMaps.ChangeAlways := chTexturePropertiesNode;
  AddField(FFdGenerateMipMaps);

  FFdGuiTexture := TSFBool.Create(Self, False, 'guiTexture', false);
   FdGuiTexture.ChangeAlways := chTexturePropertiesNode;
  AddField(FFdGuiTexture);

  DefaultContainerField := 'textureProperties';
end;

{$endif read_implementation}
