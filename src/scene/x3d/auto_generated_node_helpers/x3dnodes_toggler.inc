{ -*- buffer-read-only: t -*-

  Copyright 2015-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetStatus: Boolean;
    procedure SetStatus(const Value: Boolean);
    function GetNotStatus: Boolean;
    procedure SetNotStatus(const Value: Boolean);
    function GetEnabled: Boolean;
    procedure SetEnabled(const Value: Boolean);
  public
    {  }
    property Status: Boolean read GetStatus write SetStatus;
    {  }
    property NotStatus: Boolean read GetNotStatus write SetNotStatus;
    {  }
    property Enabled: Boolean read GetEnabled write SetEnabled;

{$endif read_interface}

{$ifdef read_implementation}

{ TTogglerNode ----------------------------------------------- }

function TTogglerNode.GetStatus: Boolean;
begin
  Result := FdStatus.Value;
end;

procedure TTogglerNode.SetStatus(const Value: Boolean);
begin
  FdStatus.Send(Value);
end;

function TTogglerNode.GetNotStatus: Boolean;
begin
  Result := FdNotStatus.Value;
end;

procedure TTogglerNode.SetNotStatus(const Value: Boolean);
begin
  FdNotStatus.Send(Value);
end;

function TTogglerNode.GetEnabled: Boolean;
begin
  Result := FdEnabled.Value;
end;

procedure TTogglerNode.SetEnabled(const Value: Boolean);
begin
  FdEnabled.Send(Value);
end;

{$endif read_implementation}
