{ -*- buffer-read-only: t -*-

  Copyright 2015-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetBBox: TBox3D;
    procedure SetBBox(const Value: TBox3D);
{$ifndef CASTLE_SLIM_NODES}
    function GetVisible: Boolean;
    procedure SetVisible(const Value: Boolean);
{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
    function GetBboxDisplay: Boolean;
    procedure SetBboxDisplay(const Value: Boolean);
{$endif not CASTLE_SLIM_NODES}
  public
    {  }
    procedure SetChildren(const Value: array of TAbstractChildNode);
    { Bounding box, as TBox3D. }
    property BBox: TBox3D read GetBBox write SetBBox;
{$ifndef CASTLE_SLIM_NODES}
    {  }
    property Visible: Boolean read GetVisible write SetVisible;
{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
    {  }
    property BboxDisplay: Boolean read GetBboxDisplay write SetBboxDisplay;
{$endif not CASTLE_SLIM_NODES}

{$endif read_interface}

{$ifdef read_implementation}

{ TAbstractX3DGroupingNode ----------------------------------------------- }

procedure TAbstractX3DGroupingNode.SetChildren(const Value: array of TAbstractChildNode);
var
  L: Integer;
  A: array of TX3DNode;
begin
  L := High(Value) + 1;
  SetLength(A, L);
  if L > 0 then
    Move(Value[0], A[0], L * SizeOf(TAbstractChildNode));
  FdChildren.Send(A);
end;

function TAbstractX3DGroupingNode.GetBBox: TBox3D;
begin
  Result := TBox3D.FromCenterSize(FdBBoxCenter.Value, FdBBoxSize.Value);
end;

procedure TAbstractX3DGroupingNode.SetBBox(const Value: TBox3D);
var
  ValueCenter, ValueSize: TVector3;
begin
  Value.ToCenterSize(ValueCenter, ValueSize);
  FdBBoxCenter.Send(ValueCenter);
  FdBBoxSize.Send(ValueSize);
end;

{$ifndef CASTLE_SLIM_NODES}
function TAbstractX3DGroupingNode.GetVisible: Boolean;
begin
  Result := FdVisible.Value;
end;

procedure TAbstractX3DGroupingNode.SetVisible(const Value: Boolean);
begin
  FdVisible.Send(Value);
end;

{$endif not CASTLE_SLIM_NODES}
{$ifndef CASTLE_SLIM_NODES}
function TAbstractX3DGroupingNode.GetBboxDisplay: Boolean;
begin
  Result := FdBboxDisplay.Value;
end;

procedure TAbstractX3DGroupingNode.SetBboxDisplay(const Value: Boolean);
begin
  FdBboxDisplay.Send(Value);
end;

{$endif not CASTLE_SLIM_NODES}
{$endif read_implementation}
