{ -*- buffer-read-only: t -*-

  Copyright 2015-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetHeadlight: Boolean;
    procedure SetHeadlight(const Value: Boolean);
    function GetSpeed: Single;
    procedure SetSpeed(const Value: Single);
    function GetTransitionTime: TFloatTime;
    procedure SetTransitionTime(const Value: TFloatTime);
    function GetVisibilityLimit: Single;
    procedure SetVisibilityLimit(const Value: Single);
    function GetBlendingSort: TOptionalBlendingSort;
    procedure SetBlendingSort(const Value: TOptionalBlendingSort);
  public
    procedure CreateNode; override;
    class function ClassX3DType: string; override;

    strict private FFdAvatarSize: TMFFloat;
    { X3D field "avatarSize". } { }
    public property FdAvatarSize: TMFFloat read FFdAvatarSize;
    { Set X3D field "avatarSize". } { }
    procedure SetAvatarSize(const Value: array of Single); overload;
    { Set X3D field "avatarSize". } { }
    procedure SetAvatarSize(const Value: TSingleList); overload;

    strict private FFdHeadlight: TSFBool;
    { X3D field "headlight". } { }
    public property FdHeadlight: TSFBool read FFdHeadlight;
    { X3D field "headlight". } { }
    property Headlight: Boolean read GetHeadlight write SetHeadlight;

    strict private FFdSpeed: TSFFloat;
    { X3D field "speed". } { }
    public property FdSpeed: TSFFloat read FFdSpeed;
    { X3D field "speed". } { }
    property Speed: Single read GetSpeed write SetSpeed;

    strict private FFdTransitionTime: TSFTime;
    { X3D field "transitionTime". } { }
    public property FdTransitionTime: TSFTime read FFdTransitionTime;
    { X3D field "transitionTime". } { }
    property TransitionTime: TFloatTime read GetTransitionTime write SetTransitionTime;

    strict private FFdTransitionType: TMFString;
    { X3D field "transitionType". } { }
    public property FdTransitionType: TMFString read FFdTransitionType;
    { Set X3D field "transitionType". } { }
    procedure SetTransitionType(const Value: array of string); overload;
    { Set X3D field "transitionType". } { }
    procedure SetTransitionType(const Value: TCastleStringList); overload;

    strict private FFdType: TMFString;
    { X3D field "type". } { }
    public property FdType: TMFString read FFdType;
    { Set X3D field "type". } { }
    procedure SetType(const Value: array of string); overload;
    { Set X3D field "type". } { }
    procedure SetType(const Value: TCastleStringList); overload;

    strict private FFdVisibilityLimit: TSFFloat;
    { X3D field "visibilityLimit". } { }
    public property FdVisibilityLimit: TSFFloat read FFdVisibilityLimit;
    { X3D field "visibilityLimit". } { }
    property VisibilityLimit: Single read GetVisibilityLimit write SetVisibilityLimit;

    strict private FEventTransitionComplete: TSFBoolEvent;
    { X3D out event "transitionComplete". } { }
    public property EventTransitionComplete: TSFBoolEvent read FEventTransitionComplete;

    strict private FFdBlendingSort: TSFStringEnum;
    { X3D field "blendingSort". } { }
    public property FdBlendingSort: TSFStringEnum read FFdBlendingSort;
    { X3D field "blendingSort". } { }
    property BlendingSort: TOptionalBlendingSort read GetBlendingSort write SetBlendingSort;

{$endif read_interface}

{$ifdef read_implementation}

{ TNavigationInfoNode ----------------------------------------------- }

procedure TNavigationInfoNode.SetAvatarSize(const Value: array of Single);
begin
  FdAvatarSize.Send(Value);
end;

procedure TNavigationInfoNode.SetAvatarSize(const Value: TSingleList);
begin
  FdAvatarSize.Send(Value);
end;

function TNavigationInfoNode.GetHeadlight: Boolean;
begin
  Result := FdHeadlight.Value;
end;

procedure TNavigationInfoNode.SetHeadlight(const Value: Boolean);
begin
  FdHeadlight.Send(Value);
end;

function TNavigationInfoNode.GetSpeed: Single;
begin
  Result := FdSpeed.Value;
end;

procedure TNavigationInfoNode.SetSpeed(const Value: Single);
begin
  FdSpeed.Send(Value);
end;

function TNavigationInfoNode.GetTransitionTime: TFloatTime;
begin
  Result := FdTransitionTime.Value;
end;

procedure TNavigationInfoNode.SetTransitionTime(const Value: TFloatTime);
begin
  FdTransitionTime.Send(Value);
end;

procedure TNavigationInfoNode.SetTransitionType(const Value: array of string);
begin
  FdTransitionType.Send(Value);
end;

procedure TNavigationInfoNode.SetTransitionType(const Value: TCastleStringList);
begin
  FdTransitionType.Send(Value);
end;

procedure TNavigationInfoNode.SetType(const Value: array of string);
begin
  FdType.Send(Value);
end;

procedure TNavigationInfoNode.SetType(const Value: TCastleStringList);
begin
  FdType.Send(Value);
end;

function TNavigationInfoNode.GetVisibilityLimit: Single;
begin
  Result := FdVisibilityLimit.Value;
end;

procedure TNavigationInfoNode.SetVisibilityLimit(const Value: Single);
begin
  FdVisibilityLimit.Send(Value);
end;

function TNavigationInfoNode.GetBlendingSort: TOptionalBlendingSort;
begin
  Result := TOptionalBlendingSort(FdBlendingSort.EnumValue);
end;

procedure TNavigationInfoNode.SetBlendingSort(const Value: TOptionalBlendingSort);
begin
  FdBlendingSort.SendEnumValue(Ord(Value));
end;

class function TNavigationInfoNode.ClassX3DType: String;
begin
  Result := 'NavigationInfo';
end;

procedure TNavigationInfoNode.CreateNode;
begin
  inherited;

  FFdAvatarSize := TMFFloat.Create(Self, True, 'avatarSize', [0.25, 1.6, 0.75]);
   FdAvatarSize.ChangeAlways := chNavigationInfo;
  AddField(FFdAvatarSize);

  FFdHeadlight := TSFBool.Create(Self, True, 'headlight', true);
   FdHeadlight.ChangeAlways := chHeadLightOn;
  AddField(FFdHeadlight);

  FFdSpeed := TSFFloat.Create(Self, True, 'speed', 1.0);
   FdSpeed.ChangeAlways := chNavigationInfo;
   FdSpeed.MustBeNonnegative := true;
  AddField(FFdSpeed);

  FFdTransitionTime := TSFTime.Create(Self, True, 'transitionTime', 1.0);
   FdTransitionTime.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdTransitionTime);

  FFdTransitionType := TMFString.Create(Self, True, 'transitionType', ['LINEAR']);
   FdTransitionType.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdTransitionType);

  FFdType := TMFString.Create(Self, True, 'type', ['EXAMINE', 'ANY']);
   FdType.ChangeAlways := chNavigationInfo;
  AddField(FFdType);

  FFdVisibilityLimit := TSFFloat.Create(Self, True, 'visibilityLimit', 0.0);
   FdVisibilityLimit.ChangeAlways := chVisibleNonGeometry;
   FdVisibilityLimit.MustBeNonnegative := true;
  AddField(FFdVisibilityLimit);

  FEventTransitionComplete := TSFBoolEvent.Create(Self, 'transitionComplete', false);
  AddEvent(FEventTransitionComplete);

  FFdBlendingSort := TSFStringEnum.Create(Self, True, 'blendingSort', BlendingSortNames, Ord(obsDefault));
   FdBlendingSort.ChangeAlways := chRedisplay;
  AddField(FFdBlendingSort);
end;

{$endif read_implementation}
