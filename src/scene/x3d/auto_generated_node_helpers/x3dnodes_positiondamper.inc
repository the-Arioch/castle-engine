{ -*- buffer-read-only: t -*-

  Copyright 2015-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetInitialDestination: TVector3;
    procedure SetInitialDestination(const Value: TVector3);
    function GetInitialValue: TVector3;
    procedure SetInitialValue(const Value: TVector3);
  public
    procedure CreateNode; override;
    class function ClassX3DType: string; override;

    strict private FEventSet_destination: TSFVec3fEvent;
    { X3D in event "set_destination". } { }
    public property EventSet_destination: TSFVec3fEvent read FEventSet_destination;

    strict private FEventSet_value: TSFVec3fEvent;
    { X3D in event "set_value". } { }
    public property EventSet_value: TSFVec3fEvent read FEventSet_value;

    strict private FEventValue_changed: TSFVec3fEvent;
    { X3D out event "value_changed". } { }
    public property EventValue_changed: TSFVec3fEvent read FEventValue_changed;

    strict private FFdInitialDestination: TSFVec3f;
    { X3D field "initialDestination". } { }
    public property FdInitialDestination: TSFVec3f read FFdInitialDestination;
    { X3D field "initialDestination". } { }
    property InitialDestination: TVector3 read GetInitialDestination write SetInitialDestination;

    strict private FFdInitialValue: TSFVec3f;
    { X3D field "initialValue". } { }
    public property FdInitialValue: TSFVec3f read FFdInitialValue;
    { X3D field "initialValue". } { }
    property InitialValue: TVector3 read GetInitialValue write SetInitialValue;

{$endif read_interface}

{$ifdef read_implementation}

{ TPositionDamperNode ----------------------------------------------- }

function TPositionDamperNode.GetInitialDestination: TVector3;
begin
  Result := FdInitialDestination.Value;
end;

procedure TPositionDamperNode.SetInitialDestination(const Value: TVector3);
begin
  FdInitialDestination.Send(Value);
end;

function TPositionDamperNode.GetInitialValue: TVector3;
begin
  Result := FdInitialValue.Value;
end;

procedure TPositionDamperNode.SetInitialValue(const Value: TVector3);
begin
  FdInitialValue.Send(Value);
end;

class function TPositionDamperNode.ClassX3DType: String;
begin
  Result := 'PositionDamper';
end;

procedure TPositionDamperNode.CreateNode;
begin
  inherited;

  FEventSet_destination := TSFVec3fEvent.Create(Self, 'set_destination', true);
  AddEvent(FEventSet_destination);

  FEventSet_value := TSFVec3fEvent.Create(Self, 'set_value', true);
  AddEvent(FEventSet_value);

  FEventValue_changed := TSFVec3fEvent.Create(Self, 'value_changed', false);
  AddEvent(FEventValue_changed);

  FFdInitialDestination := TSFVec3f.Create(Self, False, 'initialDestination', Vector3(0, 0, 0));
   FdInitialDestination.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdInitialDestination);

  FFdInitialValue := TSFVec3f.Create(Self, False, 'initialValue', Vector3(0, 0, 0));
   FdInitialValue.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdInitialValue);
end;

{$endif read_implementation}
