{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FSkyTopColorPersistent: TCastleColorRGBPersistent;
  function GetSkyTopColorForPersistent: TCastleColorRGB;
  procedure SetSkyTopColorForPersistent(const AValue: TCastleColorRGB);
published
  { @link(SkyTopColor) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(SkyTopColor) directly.

    @seealso SkyTopColor }
  property SkyTopColorPersistent: TCastleColorRGBPersistent read FSkyTopColorPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TCastleBackground.GetSkyTopColorForPersistent: TCastleColorRGB;
begin
  Result := SkyTopColor;
end;

procedure TCastleBackground.SetSkyTopColorForPersistent(const AValue: TCastleColorRGB);
begin
  SkyTopColor := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FSkyTopColorPersistent := TCastleColorRGBPersistent.Create;
  FSkyTopColorPersistent.InternalGetValue := {$ifdef FPC}@{$endif}GetSkyTopColorForPersistent;
  FSkyTopColorPersistent.InternalSetValue := {$ifdef FPC}@{$endif}SetSkyTopColorForPersistent;
  FSkyTopColorPersistent.InternalDefaultValue := SkyTopColor; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FSkyTopColorPersistent);
{$endif read_implementation_destructor}

{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FSkyEquatorColorPersistent: TCastleColorRGBPersistent;
  function GetSkyEquatorColorForPersistent: TCastleColorRGB;
  procedure SetSkyEquatorColorForPersistent(const AValue: TCastleColorRGB);
published
  { @link(SkyEquatorColor) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(SkyEquatorColor) directly.

    @seealso SkyEquatorColor }
  property SkyEquatorColorPersistent: TCastleColorRGBPersistent read FSkyEquatorColorPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TCastleBackground.GetSkyEquatorColorForPersistent: TCastleColorRGB;
begin
  Result := SkyEquatorColor;
end;

procedure TCastleBackground.SetSkyEquatorColorForPersistent(const AValue: TCastleColorRGB);
begin
  SkyEquatorColor := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FSkyEquatorColorPersistent := TCastleColorRGBPersistent.Create;
  FSkyEquatorColorPersistent.InternalGetValue := {$ifdef FPC}@{$endif}GetSkyEquatorColorForPersistent;
  FSkyEquatorColorPersistent.InternalSetValue := {$ifdef FPC}@{$endif}SetSkyEquatorColorForPersistent;
  FSkyEquatorColorPersistent.InternalDefaultValue := SkyEquatorColor; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FSkyEquatorColorPersistent);
{$endif read_implementation_destructor}

{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FGroundBottomColorPersistent: TCastleColorRGBPersistent;
  function GetGroundBottomColorForPersistent: TCastleColorRGB;
  procedure SetGroundBottomColorForPersistent(const AValue: TCastleColorRGB);
published
  { @link(GroundBottomColor) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(GroundBottomColor) directly.

    @seealso GroundBottomColor }
  property GroundBottomColorPersistent: TCastleColorRGBPersistent read FGroundBottomColorPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TCastleBackground.GetGroundBottomColorForPersistent: TCastleColorRGB;
begin
  Result := GroundBottomColor;
end;

procedure TCastleBackground.SetGroundBottomColorForPersistent(const AValue: TCastleColorRGB);
begin
  GroundBottomColor := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FGroundBottomColorPersistent := TCastleColorRGBPersistent.Create;
  FGroundBottomColorPersistent.InternalGetValue := {$ifdef FPC}@{$endif}GetGroundBottomColorForPersistent;
  FGroundBottomColorPersistent.InternalSetValue := {$ifdef FPC}@{$endif}SetGroundBottomColorForPersistent;
  FGroundBottomColorPersistent.InternalDefaultValue := GroundBottomColor; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FGroundBottomColorPersistent);
{$endif read_implementation_destructor}

{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FGroundEquatorColorPersistent: TCastleColorRGBPersistent;
  function GetGroundEquatorColorForPersistent: TCastleColorRGB;
  procedure SetGroundEquatorColorForPersistent(const AValue: TCastleColorRGB);
published
  { @link(GroundEquatorColor) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(GroundEquatorColor) directly.

    @seealso GroundEquatorColor }
  property GroundEquatorColorPersistent: TCastleColorRGBPersistent read FGroundEquatorColorPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TCastleBackground.GetGroundEquatorColorForPersistent: TCastleColorRGB;
begin
  Result := GroundEquatorColor;
end;

procedure TCastleBackground.SetGroundEquatorColorForPersistent(const AValue: TCastleColorRGB);
begin
  GroundEquatorColor := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FGroundEquatorColorPersistent := TCastleColorRGBPersistent.Create;
  FGroundEquatorColorPersistent.InternalGetValue := {$ifdef FPC}@{$endif}GetGroundEquatorColorForPersistent;
  FGroundEquatorColorPersistent.InternalSetValue := {$ifdef FPC}@{$endif}SetGroundEquatorColorForPersistent;
  FGroundEquatorColorPersistent.InternalDefaultValue := GroundEquatorColor; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FGroundEquatorColorPersistent);
{$endif read_implementation_destructor}

{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FRotationPersistent: TCastleVector4Persistent;
  function GetRotationForPersistent: TVector4;
  procedure SetRotationForPersistent(const AValue: TVector4);
published
  { @link(Rotation) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(Rotation) directly.

    @seealso Rotation }
  property RotationPersistent: TCastleVector4Persistent read FRotationPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TCastleBackground.GetRotationForPersistent: TVector4;
begin
  Result := Rotation;
end;

procedure TCastleBackground.SetRotationForPersistent(const AValue: TVector4);
begin
  Rotation := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FRotationPersistent := TCastleVector4Persistent.Create;
  FRotationPersistent.InternalGetValue := {$ifdef FPC}@{$endif}GetRotationForPersistent;
  FRotationPersistent.InternalSetValue := {$ifdef FPC}@{$endif}SetRotationForPersistent;
  FRotationPersistent.InternalDefaultValue := Rotation; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FRotationPersistent);
{$endif read_implementation_destructor}

